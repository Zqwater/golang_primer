package langfeature

// golang主要特征
func GoFeatures() {

	// 1. 自动垃圾回收
	/*
		* 1.3版本之前使用标记清除法 需要STW暂停整个程序的运行
		标记清除法定义以及缺点
		  step:
		  1.STW,找出可达对象和不可达对象
		  2.标记所有可达对象
		  3.清除所有不可达对象
		  4.停止STW,程序继续执行，随后循环执行上述step
		* 1.5版本引入三色标记法和插入写机制，插入写屏障只在堆内存中生效。最后需要对栈进行STW
		三色标记法：
		  step:
		  1. 所有对象标记为白色
		  2. 遍历所有根对象，将其引用的对象标记为灰色
		  3. 遍历所有灰色对象，将其引用的对象标记为灰色，自身变为黑色
		  4. 重复步骤2和3，直到灰色对象队列为空
		  5. 清除所有白色对象
		插入写屏障：强三色不变性 黑白不能有指向关系 （当一个对象引用另外一个对象时，将另外一个对象标记为灰色）
		删除写屏障：弱三色不变性 黑白中间需要有灰（在删除引用时，如果被删除引用的对象自身为灰色或者白色，那么被标记为灰色）
		* 1.8版本引入混合写屏障。
		GC刚开始的时候，会将栈上的可达对象全部标记为黑色
		GC期间，任何在栈上新创建的对象，均为黑色
		堆上被删除的对象标记为灰色
		堆上新添加的对象标记为灰色
	*/

	// 2. 更丰富的内置类型
	/*
	* 值类型： 基本类型 int float bool string array struct  值拷贝 值传递 分配在栈上
	* 引用类型： slice map chan pointer function interface 值拷贝 引用传递 分配在堆上
	 */

	// 3. 函数多返回值
	/*
		1. 函数多返回值时，需要用多个变量接收，或者用"_"忽略
		2. 如果函数返回值有变量名，则返回值可以不使用括号
		3. 如果函数返回值只有类型没有变量名，则必须使用括号
	*/
	// 4. 错误处理
	/*
		1. error 接口类型 定义：type error interface { Error() string }
		2. 错误处理： 1. 直接返回错误 2. 错误处理 3. 自定义错误
		3. 错误处理函数： 1. errors.New() 2. fmt.Errorf()
		4. 错误判断： 1. errors.Is() 2. errors.As()
		5. 错误处理建议： 1. 不要使用panic 2. 不要使用error字符串 3. 不要使用error类型断言 4. 不要使用error.Error()方法
	*/
	// 5. 匿名函数和闭包
	/*
		1. 匿名函数： 没有函数名的函数
		2. 闭包： 函数引用了函数体之外的变量	闭包的实现原理：函数引用了函数体之外的变量，这些变量会被绑定到函数上，形成一个闭包。
		3. 闭包的应用场景： 1. 函数柯里化 2. 延迟执行 3. 封装 4. 动态创建函数
		4. 匿名函数的应用场景： 1. 回调函数 2. 函数参数 3. 函数返回值
		5. 闭包的注意事项： 1. 闭包会引用到函数体之外的变量，这些变量会在闭包被销毁时才会被释放。 2. 闭包会导致内存泄漏
	*/
	// 6. 类型和接口
	/*
		1. 类型： 1. 基本类型 2. 引用类型 3. 自定义类型
		2. 接口： 1. 接口是方法的集合 2. 接口类型变量可以存储实现了该接口的任意类型的变量
	*/
	// 7. 并发编程
	/*
		1. 并发编程： 1. 并发：多个任务同时执行 2. 并行：多个任务同时执行 3. 并发编程的基本单位：协程 4. 并发编程的基本模型：CSP模型
		2. 协程： 1. 轻量级线程 2. 栈大小为2KB 3. 协程调度器： GPM模型 4. G：协程调度器的工作单元 5. P：协程调度器的工作线程 6. M：协程调度器的系统线程
		3. 并发编程的注意事项： 1. 并发编程的性能问题 2. 并发编程的竞态条件 3. 并发编程的死锁问题
	*/
	// 8. 反射
	/*
		1. 反射： 1. 反射是指在程序运行时，可以动态获取变量的类型信息和值 2. 反射的基本类型： reflect.Type 和 reflect.Value
		2. 反射的应用场景： 1. 序列化和反序列化 2. 动态创建对象 3. 动态调用方法
	*/
	// 9. 网络编程
	/*
		1. 网络编程： 1. 网络编程是指在网络上进行数据传输的编程 2. 网络编程的基本模型： 1. 客户端-服务器模型 2. 对等模型
		2. 网络编程的基本单位： 1. 套接字 2. 端口 3. 地址
		3. 网络编程的注意事项： 1. 网络编程的性能问题 2. 网络编程的错误处理 3. 网络编程的并发问题
	*/
	// 10. 内置工具
	/*
		1. 内置工具： 1. go命令 2. gofmt命令 3. godoc命令 4. goimports命令 5. golint命令
		2. 常用的第三方库： 1. net/http 2. net/rpc 3. google/gopacket 4. google/protobuf
	*/
	// 11. 社区支持
	/*
		1. 社区支持： 1. 官方社区 2. 第三方社区
	*/
	// 12. 静态编译
	/*
		1. 静态编译： 1. 静态编译是指在编译时就将所有的依赖库都编译到可执行文件中 2. 静态编译的优点： 1. 部署简单 2. 运行速度快 3. 占用空间小
		2. 静态编译的缺点： 1. 编译时间长 2. 不支持动态库 3. 不支持热更新
		3. 静态编译的应用场景： 1. 部署在服务器上 2. 对性能要求较高的场景

		动态编译： 1. 动态编译是指在编译时不将所有的依赖库都编译到可执行文件中 2. 动态编译的优点： 1. 支持热更新 2. 支持动态库 3. 编译时间短 4. 占用空间大
		动态编译的应用场景： 1. 开发阶段 2. 对性能要求不高的场景
	*/
	// 13. 跨平台编译
	/*
		1. 跨平台编译： 1. 跨平台编译是指在不同的操作系统上编译出不同的可执行文件 2. 跨平台编译的基本原理： 1. 编译器的支持 2. 编译器的选项
		2. 跨平台编译的注意事项： 1. 编译器的支持 2. 编译器的选项 3. 库的支持
	*/

}
